AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo

  Sample SAM Template for todo

Globals:
  Function:
    Runtime: python3.9
    Environment:
      Variables:
        TODO_TABLE: !Ref TodoTable
        USER_TABLE: !Ref UserTable

Resources:
  TodoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TodoUserPool
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: CognitoClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  ListTodo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/todo/
      Handler: list.list_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
      Architectures:
        - x86_64
      Events:
        ListTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /todo
            Method: get

  CreateTodo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/todo/
      Handler: create.create_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Architectures:
        - x86_64
      Events:
        CreateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /todo
            Method: post

  UpdateTodo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/todo/
      Handler: update.update_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Architectures:
        - x86_64
      Events:
        UpdateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /todo/{todo_id}
            Method: put

  DeleteTodo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/todo/
      Handler: delete.delete_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Architectures:
        - x86_64
      Events:
        DeleteTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /todo/{todo_id}
            Method: delete

  SearchTodo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/todo/
      Handler: search.search_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
      Architectures:
        - x86_64
      Events:
        SearchTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /todo/search/{word}
            Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  TodoApi:
    Description: "API Gateway endpoint URL for Prod stage for Todo function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/todo/"
